{% package guintf %}

{% func (x *unit) unit() %}
unit {%s= x.name %};

interface

uses  Winapi.Windows, Winapi.Messages ;

type
    {% for _,t := range *(x.types) %}{%if t.kind == delphiRecord %}
    T{%s= t.name %} = record
    public
        {% collapsespace %}{% for fName, fType := range t.fields %}
        {%if fName == "String" %}
            [BsonElement('String')]Str
        {% else %}
            {%s fName %}
        {% endif %}{% endcollapsespace %} : {%s= fType.TypeName() %};
        {% endfor %}
    end;
    {% endif %}{% endfor %}
    {% for strHandlerType,typeDecl := range x.delphiHandlersTypes %}{%s strHandlerType %} = {%s typeDecl %};
    {% endfor %}

procedure HandleCopydata(var Message: TMessage);
procedure Finalize;
procedure Initialize;
var{% for _,m := range x.functions %}
   Handle{%s m.Name %} : {%s m.strHandlerType %};{% endfor %}

implementation 

uses Grijjy.Bson, Grijjy.Bson.Serialization, stringutils, sysutils;

type
    TServerAppCmd = ({% for _,m := range x.functions[:len(x.functions)-1] %}Cmd{%s m.Name %}, {% endfor %} Cmd{%s x.functions[len(x.functions)-1].Name %});

    type _deserializer = class
        class function deserialize<T>(str:string):T;static;
    end;

var _enabled:boolean;

class function _deserializer.deserialize<T>(str:string):T;
begin
    TgoBsonSerializer.Deserialize(str, Result);
end;

procedure Initialize;
begin
    {% for _,m := range x.functions %}
    if not Assigned(Handle{%s m.Name %}) then
        raise Exception.Create('Handle{%s m.Name %} must be set');
    {% endfor %}
   _enabled := true;
end;

procedure Finalize;
begin
   _enabled := false;
end;

procedure HandleCopydata(var Message: TMessage);
var
    cd: PCOPYDATASTRUCT;
    cmd: TServerAppCmd;
    str:string;
begin
    if _enabled = false then
        exit;
    cd := PCOPYDATASTRUCT(Message.LParam);
    cmd := TServerAppCmd(Message.WParam);
    Message.result := 1;
    SetString(str, PWideChar(cd.lpData), cd.cbData div 2);
    case cmd of
        {% for _,m := range x.functions %}Cmd{%s m.Name %}:
            Handle{%s m.Name %}({%s= m.strInstructionGetFromStr %});
        {% endfor %}
    else
        raise Exception.Create('wrong message: ' + IntToStr(Message.WParam));
    end;
end;

initialization
    _enabled := false;

end.{% endfunc %}